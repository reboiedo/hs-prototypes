---

import { Icon } from "astro-icon/components";
import type { Category } from "../types/dropdown";
import Link from "./Link.astro";
import CategoryDropdown from "./CategoryDropdown.astro";
import DropdownContent from "./DropdownContent.astro";
import { navigationData } from "../constants/navigationData";
import "../styles/dropdown.css";
import Banner from "./Banner.astro";
import MenuButton from "./MenuButton.astro";


interface Props {
  surface?: "white" | "dark";
}

const { surface = "white", ...rest } = Astro.props;
---

<header class="header">
  <Banner message="Join early to save big" cta="Learn More" ctaHref="#"></Banner>
  <div class:list={["navbar", surface]} {...rest}>
    <div class="navbar-wrapper">
      <a href="/" class="logo-link">
        <Icon name={surface === "white" ? "logo--purple" : "logo--white"} class="logo headline-xs" />
      </a>
      <nav class="desktop-nav">
        <ul id="nav-list" role="menubar">
          {navigationData.map(category => (
            <li data-category={category.id} role="none">
              <CategoryDropdown
                isActive={false}
                role="menuitem"
                aria-haspopup="true"
                aria-expanded="false"
                tabindex="0"
                surface={surface}
              >
                {category.title}
              </CategoryDropdown>
            </li>
          ))}
        </ul>
      </nav>
      <div class="nav-actions">
        <Link href="#" variant="ghost" surface={surface} tabindex="0" id="log-in">Log in</Link>
        <!-- <Link href="#" variant="ghost" tabindex="0">Apply Now</Link> -->
        <Link href="#" surface={surface} tabindex="0" id="apply-now">Apply Now</Link>
        <MenuButton surface={surface} aria-label="Open menu"></MenuButton>
      </div>
    </div>
  
    <div id="dropdown-container" class:list={["dropdown-container", surface]} role="menu">
      {navigationData.map(category => (
        <DropdownContent
          category={category.id}
          items={category.items}
          surface={surface}
        />
      ))}
    </div>

    <nav class="mobile-nav" id="mobile-nav" popover="">

    </nav>

    
  </div>
</header>

<script>
  import { DropdownController } from "../controllers/DropdownController";
  import type { Category } from "../types/dropdown";
  import { gsap } from "gsap";

  const init = async () => {
    const container = document.getElementById('dropdown-container');
    const navList = document.getElementById('nav-list');
    const mobileNav = document.querySelector('.mobile-nav');
    const menuButton = document.getElementById('open-menu');
    let controller: DropdownController;
    
    if (container && navList) {
      controller = new DropdownController(container);
      controller.setupEventListeners(navList);
    }

    // Mobile menu toggle
    if (menuButton && mobileNav) {
      menuButton.addEventListener('click', () => {
        mobileNav.classList.toggle('active');
        menuButton.setAttribute('aria-expanded', 
          mobileNav.classList.contains('active').toString());
      });
    }

    // Banner animation setup with type safety
    const header = document.querySelector('.header') as HTMLElement | null;
    const banner = document.querySelector('.banner') as HTMLElement | null;
    
    if (!header || !banner) {
      console.warn('Header or banner elements not found');
      return;
    }
    
    const tl = gsap.timeline({ paused: true });
    
    // Function to update animation based on current banner height
    const updateBannerAnimation = () => {
      const bannerHeight = banner.getBoundingClientRect().height;
      if (!isNaN(bannerHeight) && bannerHeight > 0) {
        tl.clear();
        tl.to(header, {
          y: -bannerHeight,
          duration: 0.3,
          ease: "power2.inOut"
        });
      }
    };

    // Initial setup
    updateBannerAnimation();

    // Update animation when window resizes
    window.addEventListener('resize', updateBannerAnimation);

    // Simplified scroll logic
    const handleScroll = () => {
      if (window.scrollY > 0) {
        tl.play();
      } else {
        tl.reverse();
      }
    };

    window.addEventListener('scroll', handleScroll, { passive: true });

    const handleBannerAnimation = () => {
      if (container && controller) {
        const activeButton = document.querySelector('button[aria-expanded="true"]');
        if (activeButton) {
          const listItem = activeButton.closest('li');
          if (listItem) {
            const rect = listItem.getBoundingClientRect();
            const category = listItem.dataset.category as Category;
            controller.showDropdown(category, rect);
          }
        }
      }
      
      // Update mobile nav position based on banner animation
      if (mobileNav && banner) {
        const bannerHeight = banner.getBoundingClientRect().height;
        const progress = tl.progress();
        const offset = bannerHeight * progress;
        document.documentElement.style.setProperty('--banner-height', `${bannerHeight - offset}px`);
      }
    };

    // Add animation update callback
    tl.eventCallback('onUpdate', handleBannerAnimation);

    // Update banner height CSS variable
    const updateBannerHeight = () => {
      if (banner) {
        const height = banner.getBoundingClientRect().height;
        document.documentElement.style.setProperty('--banner-height', `${height}px`);
      }
    };

    // Initial setup and resize handling
    updateBannerHeight();
    window.addEventListener('resize', updateBannerHeight);
  };

  init();
</script>

<style>
  :root {
    --header-height-desktop: 80px;
    --header-height-mobile: 56px;
  }

  .header {
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 101;
  }

  .navbar {
    padding-inline: var(--space-s-m);
    background-color: var(--color-white);
    border-bottom: 1px solid var(--color-gray-200);
    z-index: 102;
  }

  ul {
    display: flex;
    flex-direction: row;
    list-style: none;
    gap: var(--space-xs);
    padding-left: var(--space-l-xl);
  }

  li {
    position: relative;
  }

  nav {
    flex-grow: 1;
  }

  .navbar.dark {
    background-color: var(--color-dark-surface);
    border-color: var(--color-purple-600);
    color: var(--color-white);
  }

  .navbar-wrapper {
    display: flex;
    flex-direction: row;
    max-width: 1824px;
    margin: 0 auto;
    height: 80px;
    justify-content: left;
    align-items: center;
  }

  .logo {

  }

  .mobile-nav {
    position: fixed;
    width: 100%;
    background-color: red;
    z-index: 99;
    inset: 0;
    top: calc(var(--header-height-mobile) + var(--banner-height, 0px));
    transition: all 0.3s ease;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
  }

  .mobile-nav.active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }

  @media (min-width: 811px) {
    .mobile-nav {
      top: calc(var(--header-height-desktop) + var(--banner-height, 0px));
    }
  }

  .nav-actions {
    display: flex;
    gap: var(--space-3xs);
  }

  nav ul > li {
    transition: opacity 0.2s ease-in-out;
  }

  /* When any item is hovered/active, dim all siblings */
  nav ul:has(li:hover) li,
  nav ul:has(button[aria-expanded="true"]) li  span {
    opacity: 0.5;
  }

  /* Reset opacity for the hovered/active item */
  nav ul li:hover,
  nav ul li:has(button[aria-expanded="true"]) {
    opacity: 1 !important;
  }

  .logo-link {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
  }

  .logo-link:focus-visible {
    outline: 2px solid var(--color-purple-500);
    outline-offset: 4px;
    border-radius: 4px;
  }

  @media (max-width: 810px) {
    .navbar {
      padding-left: var(--space-s-m);
      padding-right: var(--space-3xs);
    }
    .navbar-wrapper {
      justify-content: space-between;
      height: 56px;
      gap: var(--space-xs);
    }

    .nav-actions {
      align-items: center;
    }

    .desktop-nav {
      display: none;
    }

    .active {
      display: block;
    }


  }
</style>