---
import { Icon } from "astro-icon/components";
import Banner from "../Banner/Banner.astro";
import NavigationLayout from "../NavigationLayout/NavigationLayout.astro";
import ButtonMenu from "../ButtonMenu/ButtonMenu.astro";
import "./Bar.css";

interface Props {
  mode: 'light' | 'dark';
  banner?: {
    text: string;
    link?: {
      text: string;
      href: string;
    }
  }
}

const { mode = 'light', banner } = Astro.props;
---

<>
  <header class={`navigation-bar ${mode}`} data-initial-mode={mode}>
    <Banner text={banner?.text} link={banner?.link} />
    <div class="bar-wrapper">
      <div class="logo-container">
        <Icon name="logo--purple" class="logo logo-purple" />
        <Icon name="logo--white" class="logo logo-white" />
      </div>
      <div class="bar-buttons">
        <button>Apply</button>
        <ButtonMenu />
      </div>
      <div class="nav-background"></div>
    </div>
    <NavigationLayout />
  </header>
</>

<script>
  import { gsap } from "gsap";

  // DOM Elements
  const header = document.querySelector('.navigation-bar') as HTMLElement;
  const banner = header?.querySelector('.banner') as HTMLElement;
  const background = header?.querySelector('.nav-background') as HTMLElement;
  const menuButton = header?.querySelector('[data-menu-button]') as HTMLButtonElement;
  const navigationLayout = header?.querySelector('[data-nav-layout]') as HTMLElement;
  const purpleLogo = header?.querySelector('.logo-purple') as HTMLElement;
  const whiteLogo = header?.querySelector('.logo-white') as HTMLElement;
  
  // State
  const initialMode = header?.getAttribute('data-initial-mode');
  let isNavOpen = false;

  // Navigation Animation
  const navAnimation = {
    hidden: "polygon(0 100%, 100% 100%, 100% 100%, 0% 100%)",
    visible: "polygon(0 0%, 100% 0%, 100% 100%, 0% 100%)",
    exit: "polygon(0 0%, 100% 0%, 100% 0%, 0% 0%)"
  };

  // Opening Timeline
  const tlNavOpen = gsap.timeline({ 
    paused: true,
    onStart: () => { navigationLayout.style.visibility = 'visible' }
  }).fromTo(navigationLayout, {
    clipPath: navAnimation.hidden
  }, {
    clipPath: navAnimation.visible,
    duration: 0.6,
    ease: 'power3.inOut'
  });

  // Closing Timeline
  const tlNavClose = gsap.timeline({ 
    paused: true,
    onComplete: () => { navigationLayout.style.visibility = 'hidden' }
  }).to(navigationLayout, {
    clipPath: navAnimation.exit,
    duration: 0.6,
    ease: 'power3.inOut'
  });

  // Banner Animation
  const bannerHeight = banner?.offsetHeight || 0;
  const tlBanner = gsap.timeline({ paused: true })
    .to(banner, {
      yPercent: -100,
      duration: 0.3,
      ease: 'power2.inOut'
    })
    .to(header, {
      y: -bannerHeight,
      duration: 0.3,
      ease: 'power2.inOut'
    }, 0);

  // Light Mode Animation
  const tlLight = gsap.timeline({ paused: true })
    .to(header, {
      color: 'var(--color-gray-900)',
      duration: 0.3,
      ease: 'power2.inOut'
    })
    .to(background, {
      transform: 'translateY(0)',
      duration: 0.3,
      ease: 'power2.inOut'
    }, 0)
    .to(whiteLogo as gsap.TweenTarget, {
      opacity: 0,
      duration: 0.15,
      ease: 'power2.inOut'
    }, 0)
    .to(purpleLogo as gsap.TweenTarget, {
      opacity: 1,
      duration: 0.15,
      ease: 'power2.inOut'
    }, 0.15);

  // Event Handlers
  function toggleNavigation() {
    isNavOpen = !isNavOpen;
    menuButton.setAttribute('aria-expanded', isNavOpen.toString());
    
    if (isNavOpen) {
      document.body.style.overflow = 'hidden';
      gsap.set(navigationLayout, { clipPath: navAnimation.hidden });
      tlNavOpen.restart();
    } else {
      document.body.style.overflow = '';
      tlNavClose.restart();
    }
  }

  function handleScroll() {
    const currentScroll = window.scrollY;

    // Banner visibility
    if (currentScroll > 0) {
      tlBanner.play();
    } else {
      tlBanner.reverse();
    }

    // Mode change
    if (currentScroll > 1000) {
      initialMode === 'dark' && tlLight.play();
    } else {
      initialMode === 'dark' && tlLight.reverse();
    }
  }

  // Event Listeners
  menuButton?.addEventListener('click', toggleNavigation);
  window.addEventListener('scroll', handleScroll);
</script>


