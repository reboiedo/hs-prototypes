---
import { Icon } from 'astro-icon/components';
import type { Category } from './constants/navigationData';
import NavLink from './SubItem.astro';

interface Props {
  category: Category;
  isOpen: boolean;
  isMobile: boolean;
}

const { category, isOpen, isMobile } = Astro.props;

---
<div class="category headline-2xl" data-category-id={category.id}>
  <button 
    class="category-trigger"
    aria-expanded={isOpen}
    aria-controls={`category-${category.id}`}
  >
    {category.title}
    <Icon name="mdi:chevron-down" class="trigger-icon" />
  </button>
  
  <div 
    id={`category-${category.id}`}
    class="category-content"
    aria-hidden={!isOpen}
  >
    <div class="subitems">
      {category.items.map((item) => (
        <NavLink item={item} />
      ))}
    </div>
  </div>
</div>

<script>
  const categories = document.querySelectorAll('.category');

  categories.forEach(category => {
    const trigger = category.querySelector('.category-trigger') as HTMLButtonElement;
    const content = category.querySelector('.category-content') as HTMLDivElement;
    const icon = category.querySelector('.trigger-icon');
    const subitems = category.querySelector('.subitems') as HTMLDivElement;

    if (!trigger || !content || !subitems) return;

    trigger.addEventListener('click', () => {
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      
      // Toggle states
      trigger.setAttribute('aria-expanded', (!isExpanded).toString());
      content.setAttribute('aria-hidden', isExpanded.toString());
      
      // Set height for animation
      if (!isExpanded) {
        content.style.height = `${subitems.offsetHeight}px`;
        icon?.classList.add('rotate');
      } else {
        content.style.height = '0px';
        icon?.classList.remove('rotate');
      }
    });
  });
</script>

<style>
  .category {
    border-bottom: 1px solid var(--color-purple-700);
  }

  .category-trigger {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-xs) var(--space-s-m);
    color: var(--color-white);
    background: none;
    border: none;
    cursor: pointer;
  }

  .trigger-icon {
    transition: transform 0.3s ease;
  }

  .trigger-icon.rotate {
    transform: rotate(180deg);
  }

  .category-content {
    height: 0;
    overflow: hidden;
    transition: height 0.3s ease;
  }

  .subitems {
    padding-bottom: var(--space-l);
    padding-inline: var(--space-s-m);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  @media (min-width: 768px) {
    .category-trigger {
      padding: var(--space-xs) 0;
    }

    .subitems {
      padding-inline: 0;
    }
  }
</style> 